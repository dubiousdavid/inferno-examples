{"version":3,"sources":["app/initialize.js"],"names":[],"mappingsfile":"public/app.js","sourcesContent":["'use strict';\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _inferno = require('inferno');\n\nvar _inferno2 = _interopRequireDefault(_inferno);\n\nvar _router = require('router5');\n\nvar _router2 = _interopRequireDefault(_router);\n\nvar _browser = require('router5/plugins/browser');\n\nvar _browser2 = _interopRequireDefault(_browser);\n\nvar _listeners = require('router5/plugins/listeners');\n\nvar _listeners2 = _interopRequireDefault(_listeners);\n\nvar _Observable = require('rxjs/Observable');\n\nvar _Subject = require('rxjs/Subject');\n\nrequire('rxjs/add/operator/do');\n\nrequire('rxjs/add/operator/map');\n\nrequire('rxjs/add/operator/scan');\n\nrequire('rxjs/add/operator/startWith');\n\nrequire('rxjs/add/operator/switchMap');\n\nrequire('rxjs/add/operator/publishBehavior');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\n// Routing\nvar router = (0, _router2.default)().addNode('all', '/').addNode('active', '/active').addNode('completed', '/completed').usePlugin((0, _listeners2.default)()).usePlugin(_router.loggerPlugin).usePlugin((0, _browser2.default)({ useHash: true })).start();\n\nvar createVNode = _inferno2.default.createVNode;\nfunction Link(props) {\n  var route = props.route,\n      params = props.params,\n      children = props.children,\n      rest = _objectWithoutProperties(props, ['route', 'params', 'children']);\n\n  var href = router.buildUrl(route, params);\n\n  return createVNode(2, 'a', _extends({}, rest, {\n    'href': href\n  }), children);\n}\n\n// Streams\nvar actions$ = new _Subject.Subject();\n\n// Model\nvar initModel = getFromStorage() || { items: [], allCompleted: false, filter: router.getState().name, text: '', uid: 0 };\n\nvar storageKey = 'todos-infernojs';\n\nfunction getFromStorage() {\n  var json = localStorage.getItem(storageKey);\n  if (json) {\n    return JSON.parse(json);\n  }\n}\n\n// Update\nfunction update(model, _ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n      action = _ref2[0],\n      value = _ref2[1];\n\n  var items = model.items,\n      allCompleted = model.allCompleted,\n      filter = model.filter,\n      text = model.text,\n      uid = model.uid;\n\n  var newItems = void 0;\n\n  switch (action) {\n    case 'changeText':\n      return _extends({}, model, { text: value });\n    case 'addItem':\n      return _extends({}, model, { text: '', allCompleted: false, items: [].concat(_toConsumableArray(items), [newItem(value, uid)]), uid: uid + 1 });\n    case 'toggleItem':\n      newItems = items.map(function (item) {\n        return item.id == value ? _extends({}, item, { completed: !item.completed }) : item;\n      });\n      return _extends({}, model, { items: newItems, allCompleted: allItemsCompleted(newItems) });\n    case 'editItem':\n      newItems = items.map(function (item) {\n        return item.id == value ? _extends({}, item, { editing: true }) : item;\n      });\n      return _extends({}, model, { items: newItems });\n    case 'changeItemText':\n      newItems = items.map(function (item) {\n        return item.id == value.id ? _extends({}, item, { text: value.text }) : item;\n      });\n      return _extends({}, model, { items: newItems });\n    case 'cancelEdit':\n      newItems = items.map(function (item) {\n        return item.editing ? _extends({}, item, { editing: false }) : item;\n      });\n      return _extends({}, model, { items: newItems });\n    case 'updateItem':\n      if (value == '') {\n        var index = items.findIndex(function (item) {\n          return item.editing;\n        });\n        newItems = index == -1 ? items : removeItem(items, items[index].id);\n      } else {\n        newItems = items.map(function (item) {\n          return item.editing ? _extends({}, item, { editing: false, text: value }) : item;\n        });\n      }\n      return items != newItems ? _extends({}, model, { items: newItems }) : model;\n    case 'removeItem':\n      newItems = removeItem(items, value);\n      return _extends({}, model, { items: newItems, allCompleted: allItemsCompleted(newItems) });\n    case 'toggleAll':\n      var newAllCompleted = !allCompleted;\n\n      newItems = items.map(function (item) {\n        return _extends({}, item, { completed: newAllCompleted });\n      });\n      return _extends({}, model, { items: newItems, allCompleted: newAllCompleted });\n    case 'changeFilter':\n      return _extends({}, model, { filter: value });\n    case 'clearCompleted':\n      newItems = items.filter(function (item) {\n        return !item.completed;\n      });\n      return _extends({}, model, { items: newItems });\n  }\n}\n\nfunction removeItem(items, id) {\n  return items.filter(function (item) {\n    return item.id != id;\n  });\n}\n\nfunction allItemsCompleted(items) {\n  return items.every(function (item) {\n    return item.completed;\n  });\n}\n\nfunction newItem(text, id) {\n  return { id: id, text: text, completed: false, editing: false };\n}\n\n// View\nfunction view(model) {\n  var text = model.text;\n\n  var numItems = model.items.length;\n\n  return createVNode(2, 'div', null, [createVNode(2, 'section', {\n    'className': 'todoapp'\n  }, [createVNode(2, 'header', {\n    'className': 'header'\n  }, [createVNode(2, 'h1', null, 'todos'), createVNode(512, 'input', {\n    'className': 'new-todo',\n    'placeholder': 'What needs to be done?',\n    'autofocus': true,\n    'value': text\n  }, null, {\n    'onInput': handleInput,\n    'onKeyDown': onEnter\n  })]), numItems > 0 ? main(model) : '', numItems > 0 ? footer(model) : '']), info()]);\n}\n\nfunction handleInput(e) {\n  var value = e.target.value.trimLeft();\n  actions$.next(['changeText', value]);\n}\n\nfunction onEnter(e) {\n  if (e.code == 'Enter') {\n    var text = e.target.value.trim();\n    if (text !== '') actions$.next(['addItem', text]);\n  }\n}\n\nfunction main(_ref3) {\n  var items = _ref3.items,\n      filter = _ref3.filter,\n      allCompleted = _ref3.allCompleted;\n\n  function isVisible(item) {\n    switch (filter) {\n      case 'all':\n        return true;\n      case 'completed':\n        return item.completed;\n      case 'active':\n        return !item.completed;\n    }\n  }\n\n  return createVNode(2, 'section', {\n    'className': 'main'\n  }, [createVNode(512, 'input', {\n    'className': 'toggle-all',\n    'type': 'checkbox',\n    'checked': allCompleted\n  }, null, {\n    'onClick': toggleAll\n  }), createVNode(2, 'label', {\n    'for': 'toggle-all'\n  }, 'Mark all as complete'), createVNode(2, 'ul', {\n    'className': 'todo-list'\n  }, items.filter(isVisible).map(viewItem))]);\n}\n\nfunction toggleAll() {\n  actions$.next(['toggleAll']);\n}\n\nfunction toggleClass(className, enabled) {\n  return enabled ? className : '';\n}\n\nfunction toggleClasses(classes) {\n  var output = [];\n  for (var cls in classes) {\n    output.push(toggleClass(cls, classes[cls]));\n  }\n  return output.join(' ');\n}\n\nfunction viewItem(item) {\n  var id = item.id,\n      completed = item.completed,\n      editing = item.editing,\n      text = item.text;\n\n  return createVNode(2, 'li', {\n    'className': toggleClasses({ completed: completed, editing: editing })\n  }, [createVNode(2, 'div', {\n    'className': 'view'\n  }, [createVNode(512, 'input', {\n    'className': 'toggle',\n    'type': 'checkbox',\n    'checked': completed\n  }, null, {\n    'onClick': (0, _inferno.linkEvent)(id, checkboxClick)\n  }), createVNode(2, 'label', null, text, {\n    'onDblClick': (0, _inferno.linkEvent)(id, itemClick)\n  }), createVNode(2, 'button', {\n    'className': 'destroy'\n  }, null, {\n    'onClick': (0, _inferno.linkEvent)(id, destroyClick)\n  })]), createVNode(512, 'input', {\n    'className': 'edit',\n    'value': editing ? text : ''\n  }, null, {\n    'onKeyDown': onEditDone,\n    'onBlur': onBlur,\n    'onInput': (0, _inferno.linkEvent)(id, itemInput),\n    'onComponentDidMount': focusElement\n  })]);\n}\n\nfunction focusElement(oldVnode, vnode) {\n  vnode.elm.focus();\n}\n\nfunction itemInput(id, e) {\n  var text = e.target.value.trimLeft();\n  actions$.next(['changeItemText', { id: id, text: text }]);\n}\n\nfunction onEditDone(e) {\n  switch (e.code) {\n    case 'Enter':\n      var text = e.target.value.trim();\n      actions$.next(['updateItem', text]);\n      break;\n    case 'Escape':\n      actions$.next(['cancelEdit']);\n      break;\n  }\n}\n\nfunction onBlur(e) {\n  var text = e.target.value.trim();\n  actions$.next(['updateItem', text]);\n}\n\nfunction itemClick(id) {\n  actions$.next(['editItem', id]);\n}\n\nfunction checkboxClick(id) {\n  actions$.next(['toggleItem', id]);\n}\n\nfunction destroyClick(id) {\n  actions$.next(['removeItem', id]);\n}\n\nfunction footer(_ref4) {\n  var items = _ref4.items,\n      filter = _ref4.filter;\n\n  var numDone = numCompleted(items);\n  var numLeft = items.length - numDone;\n\n  return createVNode(2, 'footer', {\n    'className': 'footer'\n  }, [createVNode(2, 'span', {\n    'className': 'todo-count'\n  }, createVNode(2, 'strong', null, [numLeft, ' item', numLeft == 1 ? '' : 's', ' left'])), createVNode(2, 'ul', {\n    'className': 'filters'\n  }, [viewFilter('all', filter), viewFilter('active', filter), viewFilter('completed', filter)]), numDone >= 1 ? createVNode(2, 'button', {\n    'className': 'clear-completed'\n  }, ['Clear Completed (', numDone, ')'], {\n    'onClick': clearCompleted\n  }) : '']);\n}\n\nfunction numCompleted(items) {\n  return items.filter(function (item) {\n    return item.completed;\n  }).length;\n}\n\nfunction clearCompleted(e) {\n  actions$.next(['clearCompleted']);\n}\n\nfunction viewFilter(filter, currentFilter) {\n  return createVNode(2, 'li', null, createVNode(16, Link, {\n    'route': filter,\n    'className': toggleClass('selected', filter == currentFilter),\n    children: filter\n  }));\n}\n\nfunction info() {\n  return createVNode(2, 'footer', {\n    'className': 'info'\n  }, [createVNode(2, 'p', null, 'Double-click to edit a todo'), createVNode(2, 'p', null, ['Created by ', createVNode(2, 'a', {\n    'href': 'https://github.com/dubiousdavid'\n  }, 'David Sargeant')]), createVNode(2, 'p', null, ['Part of ', createVNode(2, 'a', {\n    'href': 'http://todomvc.com'\n  }, 'TodoMVC')])]);\n}\n\n// Reduce\nvar model$ = actions$.do(function (x) {\n  return console.log('Actions', x);\n}).scan(update, initModel).do(function (x) {\n  return console.log('Model', x);\n}).publishBehavior(initModel).refCount();\n\n// Save to local storage\nfunction writeToStorage(model) {\n  localStorage.setItem(storageKey, JSON.stringify(model));\n}\n\nmodel$.map(disableEditing).subscribe(writeToStorage);\n\nfunction disableEditing(model) {\n  var newItems = model.items.map(function (item) {\n    return _extends({}, item, { editing: false });\n  });\n  return _extends({}, model, { items: newItems });\n}\n\n// Handle route change\nrouter.addListener(changeFilter);\n\nfunction changeFilter(_ref5) {\n  var name = _ref5.name;\n\n  actions$.next(['changeFilter', name]);\n}\n\n// Render\nvar view$ = model$.map(view);\nvar render = _inferno2.default.createRenderer();\nview$.subscribe(function (vNode) {\n  render(document.getElementById('app'), vNode);\n});\n"]}